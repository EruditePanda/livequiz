class LiveQuiz
    constructor: () ->
      @pubnub = null
      @heartbeat = 20
      @publish_key = '<%= ENV.fetch('PUBNUB_PUBLISH_KEY') %>'
      @subscribe_key = '<%= ENV.fetch('PUBNUB_SUBSCRIBE_KEY') %>'

    fetchSettings: ->

      @authorization_key = $('[data-attribute="authorization_key"]').val()
      @uuid = @authorization_key
      @session_key = $('[data-attribute="session_key"]').val()
      @participant_name = $('[data-attribute="participant_name"]').val()
      @client_channel = @session_key+"-client"
      @server_channel = @session_key+"-server"
      @chat_channel = @session_key+"-chat"

    fetchReactComponents: ->

      @participantListReact = LiveQuiz.fetchReactDomComponentFromReactName('ParticipantsList')
      @activityFeedReact = LiveQuiz.fetchReactDomComponentFromReactName('ActivityFeed')
      @questionDisplayReact = LiveQuiz.fetchReactDomComponentFromReactName('QuestionDisplay')

    initializePubNub: () ->

      @pubnub = PUBNUB(
          publish_key: @publish_key
          subscribe_key: @subscribe_key
          auth_key: @authorization_key
          uuid: @uuid
          origin: 'pubsub.pubnub.com'
          ssl: true
      )
      @subscribeToChatChannel()
      @subscribeToServerChannel()
      @whoIsHereNow()


    whoIsHereNow: ->

      @pubnub.here_now
        channel: @chat_channel
        state: true
        callback: (m) =>
          uuids_with_status = _.map(m.uuids, (uuid) -> 
              { uuid: uuid.uuid, status: 'online', name: uuid.state.name }
          )
          React.render(<ParticipantsList onlineParticipants=uuids_with_status />, @participantListReact)  

    ###################### SUSCRIBE #########################

    subscribeToChatChannel: ->

      @pubnub.subscribe
        channel: @chat_channel
        state:
          name: @participant_name
        message: (m, env, ch, timer, magic_ch) ->
        presence: @presenceCallback
        connect: ->
        heartbeat: 20

    subscribeToServerChannel: ->
      @pubnub.subscribe
        channel: @server_channel,
            message: @serverCallback
            connect: ->

    ###################### CALLBACKS #########################

    presenceCallback: (event_message, env, ch, timer, magic_ch) =>

      React.render(<ActivityFeed newActivity=event_message />, @activityFeedReact)
      
      status = switch event_message.action
          when 'leave' then 'offline'
          when 'timeout' then 'offline'
          when 'join' then 'online'
      name = if event_message.data?
                event_message.data.name
            else
              null

      if status?
          uuid_with_status = {uuid: event_message.uuid, status: status, name: name}
          React.render(<ParticipantsList newParticipant=uuid_with_status />, @participantListReact) 

    serverCallback: =>

      React.render(<QuestionDisplay question=event_message.data.question />, @questionDisplayReact)

    ##################### UTILITIES ########################

    @fetchReactDomComponentFromReactName:  (react_name) ->
      $("[data-react-class=#{react_name}]").get(0)


@liveQuiz = new LiveQuiz()

$ ->  
  
    liveQuiz.fetchSettings()
    liveQuiz.fetchReactComponents()
    liveQuiz.initializePubNub()
   